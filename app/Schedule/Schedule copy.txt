"use client"

import { useState } from "react"
import {
  DndContext,
  type DragEndEvent,
  type DragOverEvent,
  type DragStartEvent,
  PointerSensor,
  useSensor,
  useSensors,
} from "@dnd-kit/core"
import { snapCenterToCursor } from "@dnd-kit/modifiers"

import { ScheduleEvent } from "./schedule-event"
import { ScheduleGrid } from "./schedule-grid"

// Define the event type
export type Event = {
  id: string
  title: string
  day: number // 0-4 for Monday-Friday
  startHour: number // 0-23
  duration: number // in hours
  color: string
  description?: string
}

// Sample initial events
const initialEvents: Event[] = [
  {
    id: "1",
    title: "Team Meeting",
    day: 0, // Monday
    startHour: 9,
    duration: 1,
    color: "bg-blue-100 border-blue-300",
    description: "Weekly team sync with department heads",
  },
  {
    id: "2",
    title: "Project Review",
    day: 1, // Tuesday
    startHour: 13,
    duration: 2,
    color: "bg-green-100 border-green-300",
    description: "Review Q1 project milestones and deliverables",
  },
  {
    id: "3",
    title: "Client Call",
    day: 2, // Wednesday
    startHour: 11,
    duration: 1,
    color: "bg-purple-100 border-purple-300",
    description: "Discuss new requirements with the client",
  },
  {
    id: "4",
    title: "Lunch Break",
    day: 3, // Thursday
    startHour: 12,
    duration: 1,
    color: "bg-yellow-100 border-yellow-300",
    description: "Team lunch at the cafeteria",
  },
  {
    id: "5",
    title: "Planning",
    day: 4, // Friday
    startHour: 15,
    duration: 2,
    color: "bg-red-100 border-red-300",
    description: "Sprint planning for next week",
  },
]

export function WeeklySchedule() {
  const [events, setEvents] = useState<Event[]>(initialEvents)
  const [expandedEventId, setExpandedEventId] = useState<string | null>(null)
  const [activeId, setActiveId] = useState<string | null>(null)

  // Configure sensors for drag and drop
  const sensors = useSensors(
    useSensor(PointerSensor, {
      activationConstraint: {
        distance: 8,
      },
    }),
  )

  // Handle event click to expand/collapse
  const handleEventClick = (eventId: string) => {
    setExpandedEventId(expandedEventId === eventId ? null : eventId)
  }

  // Handle drag start
  const handleDragStart = (event: DragStartEvent) => {
    setActiveId(event.active.id as string)
    // Close any expanded events when starting to drag
    setExpandedEventId(null)
  }

  // Handle drag over to provide visual feedback
  const handleDragOver = (event: DragOverEvent) => {
    // You could add visual feedback here if needed
  }

  // Handle drag end to update event position
  const handleDragEnd = (event: DragEndEvent) => {
    const { active, over } = event
    setActiveId(null)

    if (!over) return

    const eventId = active.id as string
    const cellId = over.id as string

    // Parse the day and hour from the cell ID
    const [day, hour] = cellId.split("-").map(Number)

    // Make sure we have valid values
    if (isNaN(day) || isNaN(hour) || day < 0 || day > 4 || hour < 8 || hour > 19) {
      return
    }

    setEvents((prevEvents) => {
      return prevEvents.map((evt) => {
        if (evt.id === eventId) {
          // Update the day and start hour based on where it was dropped
          return {
            ...evt,
            day,
            startHour: hour,
          }
        }
        return evt
      })
    })
  }

  return (
    <DndContext
      sensors={sensors}
      onDragStart={handleDragStart}
      onDragOver={handleDragOver}
      onDragEnd={handleDragEnd}
      modifiers={[snapCenterToCursor]}
    >
      <div className="rounded-lg border bg-card shadow">
        <ScheduleGrid>
          {events.map((event) => (
            <ScheduleEvent
              key={event.id}
              event={event}
              isExpanded={expandedEventId === event.id}
              onClick={() => handleEventClick(event.id)}
            />
          ))}
        </ScheduleGrid>
      </div>
    </DndContext>
  )
}

